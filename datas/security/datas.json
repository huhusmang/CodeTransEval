[
  {
    "ID": "CWE-020-1",
    "Description": "Untrusted data passed to external API",
    "VulCode": "from flask import Flask, redirect, request\nimport re\n\napp = Flask(__name__)\n\n@app.route('/redirect_to_target')\ndef redirect_to_target():\n    target = request.args.get('target')\n    if re.match(r'^https?://example\\.com/', target):\n        return redirect(target)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/Security/CWE-020-ExternalAPIs/UntrustedDataToExternalAPI.ql",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-020/examples",
    "CWE": "CWE-020",
    "Top25": true
  },
  {
    "ID": "CWE-020-2",
    "Description": "Untrusted data passed to external API",
    "VulCode": "from flask import Flask, request, make_response\napp = Flask(__name__)\n\n@app.route(\"/xss\")\ndef xss():\n    username = request.args.get(\"username\")\n    return make_response(\"Hello {}\".format(username))",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/Security/CWE-020-ExternalAPIs/UntrustedDataToExternalAPI.ql",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-020/examples",
    "CWE": "CWE-020",
    "Top25": true
  },
  {
    "ID": "CWE-022-1",
    "Description": "Uncontrolled data used in path expression",
    "VulCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/read\")\ndef read():\n    requested_file_name = request.args.get('filename')\n    safe_dir = '/safe/'\n\n    file_path = safe_dir + requested_file_name\n    file_content = open(file_path, 'r').read()\n\n    return file_content",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-022",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-022/0-py/info.json",
    "CWE": "CWE-022",
    "Top25": true
  },
  {
    "ID": "CWE-022-2",
    "Description": "Uncontrolled data used in path expression",
    "VulCode": "from flask import Flask, request, send_file\nimport os\n\napp = Flask(__name__)\n\n# return the requested image from the folder \"/images\"\n@app.route('/img')\ndef img():\n    img_name = request.args.get('img_name')\n    img_path = \"images/\" + img_name\n\n    if os.path.isfile(img_path):\n        return send_file(img_path)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-022",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-022/1-py/info.json",
    "CWE": "CWE-022",
    "Top25": true
  },
  {
    "ID": "CWE-022-3",
    "Description": "Uncontrolled data used in path expression",
    "VulCode": "import os\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/deleteImage')\ndef deleteImage():\n    '''\n    Get file name from request, \n    validate the request, and delete the image file\n    '''\n    fileName = request.args.get('fileName')\n    os.remove(fileName)\n    return \"File deleted\"",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-022",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-022/author_1.py",
    "CWE": "CWE-022",
    "Top25": true
  },
  {
    "ID": "CWE-078-1",
    "Description": "Unsafe shell command constructed from library input",
    "VulCode": "from flask import Flask, request, redirect\nimport subprocess\n\napp = Flask(__name__)\n\n# ping a URL to see if it is alive using \"ping\" system command\n@app.route('/url/ping')\ndef ping():\n    # the URL to ping is stored as a variable \"url\"\n    url = request.args.get('url')\n    # run the ping command using the system command \"ping\"\n    command = \"ping -c 1 \" + url\n    # run the command and store the output\n    output = subprocess.check_output(command, shell=True)\n    # return the output to the user\n    return output",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-078",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-078/2-py/info.json",
    "CWE": "CWE-078",
    "Top25": true
  },
  {
    "ID": "CWE-078-2",
    "Description": "Unsafe shell command constructed from library input",
    "VulCode": "from flask import Flask, request\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route(\"/ls\")\ndef ls():\n    dirname = request.args.get('dirname')\n    command = \"ls \" + dirname\n    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    out, err = p.communicate()\n    return out\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-078",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-078/0-py/info.json",
    "CWE": "CWE-078",
    "Top25": true
  },
  {
    "ID": "CWE-078-3",
    "Description": "Unsafe shell command constructed from library input",
    "VulCode": "from flask import Flask, request, redirect\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route(\"/user_info\")\ndef user_info():\n    # get a username from request\n    username = request.args.get('username')\n    # construct a command to get the userinfo of the requested username\n    # then execute the command\n    command = \"id \" + username\n    output = subprocess.check_output(command, shell=True)\n\n    return output",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-078",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-078/1-py/info.json",
    "CWE": "CWE-078",
    "Top25": true
  },
  {
    "ID": "CWE-079-1",
    "Description": "Reflected server-side cross-site scripting",
    "VulCode": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/showName')\ndef name():\n    first_name = request.args.get('name', '')\n    return make_response(\"Your name is \" + first_name)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-079",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-079/examples",
    "CWE": "CWE-079",
    "Top25": true
  },
  {
    "ID": "CWE-079-2",
    "Description": "Reflected server-side cross-site scripting",
    "VulCode": "import flask\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return \"<p>Hello, World!</p>\"\n\n# function which says hello to the user\n@app.route(\"hello\")\ndef hello():\n    username = request.args.get('username')\n    return \"Hello, \" + username\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-079",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-079/0-py/info.json",
    "CWE": "CWE-079",
    "Top25": true
  },
  {
    "ID": "CWE-079-3",
    "Description": "Reflected server-side cross-site scripting",
    "VulCode": "from flask import Flask, request, make_response\n\napp = Flask(__name__)\n\n@app.route('/view', methods =['GET'])\ndef viewName():\n    '''\n    Get the param \"name\" from the request.\n    Open the \"templates/xss_shared.html\" file and replace  \"{{name}}\" with the \"name\" param.\n    return the html file as a response.\n    '''\n    param = request.args.get('name', '')\n    html = open('templates/xss_shared.html').read()\n    response = make_response(html.replace('{{ name }}', param))\n    return response",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-079",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-079/sonar_1.py",
    "CWE": "CWE-079",
    "Top25": true
  },
  {
    "ID": "CWE-089-1",
    "Description": "SQL query built from user-controlled sources",
    "VulCode": "from flask import Flask, request\nimport MySQLdb\n\napp = Flask(__name__)\n\n@app.route('/unsubscribe')\ndef unsubscribe():\n    email = request.args.get('email')\n    db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"root\", db=\"db\")\n    cursor = db.cursor()\n    \n    query = f\"SELECT * FROM users WHERE email = '{email}'\"\n    cursor.execute(query)\n    \n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-089",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-089/0-py/info.json",
    "CWE": "CWE-089",
    "Top25": true
  },
  {
    "ID": "CWE-089-2",
    "Description": "SQL query built from user-controlled sources",
    "VulCode": "from django.conf.urls import url\nfrom django.db import connection\n\n\ndef show_user(request, username):\n    with connection.cursor() as cursor:\n        cursor.execute(\"SELECT * FROM users WHERE username = '%s'\" % username)\n        user = cursor.fetchone()\n\nurlpatterns = [url(r'^users/(?P<username>[^/]+)$', show_user)]",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-089",
    "Source": "https://github.com/github/codeql/blob/main/python/ql/src/Security/CWE-089/examples/sql_injection.py",
    "CWE": "CWE-089",
    "Top25": true
  },
  {
    "ID": "CWE-089-3",
    "Description": "SQL query built from user-controlled sources",
    "VulCode": "from flask import Flask, request, redirect\nimport MySQLdb\nfrom flask import session\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    db = MySQLdb.connect(host=\"localhost\",\n                         user=\"root\",\n                         passwd=\"root\",\n                         db=\"db\")\n    return db\n\ndef insert_user_message_in_db(username, message):\n    db = get_db_connection()\n    cursor = db.cursor()\n    cursor.execute(\"INSERT INTO messages (username, message) VALUES ('\" + username + \"', '\" + message + \"')\")\n    db.commit()\n    db.close()\n\n@app.route('/post', methods=['POST'])\ndef post():\n    username = session['username']\n    message = request.form['message']\n    insert_user_message_in_db(username, message)\n    return redirect('/')\n\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-089",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-089/1-py/info.json",
    "CWE": "CWE-089",
    "Top25": true
  },
  {
    "ID": "CWE-089-4",
    "Description": "SQL query built from user-controlled sources",
    "VulCode": "from flask import Flask, request, redirect\nimport MySQLdb\nfrom flask import session\n\napp = Flask(__name__)\n\n@app.route('/buy_order', methods=['POST'])\ndef buy_stock():\n    stock_name = request.form['stock_name']\n    stock_quantity = request.form['stock_quantity']\n    username = session['username']\n\n    #insert the buy order in the database\n    db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"root\", db=\"db\")\n    cursor = db.cursor()\n    cursor.execute(\"INSERT INTO buy_order (stock_name, stock_quantity, username) VALUES ('\" + stock_name + \"', '\" + stock_quantity + \"', '\" + username + \"')\")\n    db.commit()\n    db.close()",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-089",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/trained/cwe-089/2-py/info.json",
    "CWE": "CWE-089",
    "Top25": true
  },
  {
    "ID": "CWE-094-1",
    "Description": "Code injection",
    "VulCode": "import base64\nfrom flask import Flask, request\napp = Flask(__name__)\n\ndef setname(first_name):\n    pass\n\n@app.route(\"/code_execution\")\ndef code_execution():\n    first_name = base64.decodestring(request.args.get('first_name'))\n    # call setname on first_name\n    exec(\"setname('%s')\" % first_name)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-094",
    "Source": "https://github.com/eth-sri/sven/blob/master/data_eval/gen_2/cwe-094/0-py/info.json",
    "CWE": "CWE-094",
    "Top25": true
  },
  {
    "ID": "CWE-094-2",
    "Description": "Code injection",
    "VulCode": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    '''\n    Get the module version from the request object\n    importing the urllib module with the version by using exec()\n    '''\n    module = request.args.get(\"module\")\n    exec(\"import urllib%s as urllib\" % module)\n    return \"Module imported\"",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-094",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-094/sonar_1.py",
    "CWE": "CWE-094",
    "Top25": true
  },
  {
    "ID": "CWE-117-1",
    "Description": "Log Injection",
    "VulCode": "from flask import Flask, request\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n@app.route('/logger')\ndef logger():\n    '''\n    get name data from the request and log it\n    '''\n    name = request.args.get('name')\n    logging.info('name: %s', name)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-117",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-117",
    "CWE": "CWE-117",
    "Top25": false
  },
  {
    "ID": "CWE-208-1",
    "Description": "Timing attack against Hash",
    "VulCode": "import hmac\nimport hashlib\n\nkey = \"e179017a-62b0-4996-8a38-e91aa9f1\"\nmsg = \"Test\"\n\ndef sign(pre_key, imsg, alg):\n    return hmac.new(pre_key, imsg, alg).digest()\n\ndef verify(msg, sig):\n    return sig == sign(key, msg, hashlib.sha256) #bad\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-208",
    "Source": "https://github.com/github/codeql/blob/main/python/ql/src/experimental/Security/CWE-208/TimingAttackAgainstHash/SafeComparisonOfHash.py",
    "CWE": "CWE-208",
    "Top25": false
  },
  {
    "ID": "CWE-208-2",
    "Description": "Timing attack against secret",
    "VulCode": "from flask import Flask\nfrom flask import request\n\n@app.route('/bad')\ndef bad():\n    secret = request.headers.get('X-Auth-Token')    \n    if secret == \"token\":\n        raise Exception('bad token')\n    return 'bad'\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run() \n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-208",
    "Source": "https://github.com/github/codeql/blob/main/python/ql/src/experimental/Security/CWE-208/TimingAttackAgainstSensitiveInfo/UnSafeComparisonOfSensitiveInfo.py",
    "CWE": "CWE-208",
    "Top25": false
  },
  {
    "ID": "CWE-209-1",
    "Description": "Information exposure through an exception",
    "VulCode": "from flask import Flask\napp = Flask(__name__)\n\n\nimport traceback\n\ndef do_computation():\n    raise Exception(\"Secret info\")\n\n@app.route('/bad')\ndef server_bad():\n    try:\n        do_computation()\n    except Exception as e:\n        return traceback.format_exc()",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-209",
    "Source": "https://github.com/github/codeql/blob/main/python/ql/src/Security/CWE-209/StackTraceExposure.py",
    "CWE": "CWE-209",
    "Top25": false
  },
  {
    "ID": "CWE-287-1",
    "Description": "Hard-coded credentials",
    "VulCode": "from flask import Flask, session\n\napp = Flask(__name__)\naConstant = 'CHANGEME1'\nSECRET_KEY = aConstant\napp.config.from_object(__name__)\n\n\n@app.route('/')\ndef DEB_EX():\n    if 'logged_in' not in session:\n        session['logged_in'] = 'value'\n    return app.secret_key, session.__str__()\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-287-ConstantSecretKey",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-287-ConstantSecretKey/examples",
    "CWE": "CWE-287",
    "Top25": true
  },
  {
    "ID": "CWE-287-2",
    "Description": "Hard-coded credentials",
    "VulCode": "from flask import Flask, session\n\napp = Flask(__name__)\naConstant = 'CHANGEME1'\napp.config['SECRET_KEY'] = aConstant\napp.secret_key = aConstant\napp.config.update(SECRET_KEY=aConstant)\n\n\n@app.route('/')\ndef CheckForSecretKeyValue():\n    return app.secret_key, session.get('logged_in')\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-287-ConstantSecretKey",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-287-ConstantSecretKey/examples",
    "CWE": "CWE-287",
    "Top25": true
  },
  {
    "ID": "CWE-295-1",
    "Description": "Request without certificate validation",
    "VulCode": "import requests\n\n\nrequests.get('https://semmle.com', verify=False)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-295",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-295/examples",
    "CWE": "CWE-295",
    "Top25": false
  },
  {
    "ID": "CWE-295-2",
    "Description": "Request without certificate validation",
    "VulCode": "import requests\n\n\nrequests.get('https://semmle.com', verify=0)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-295",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-295/examples",
    "CWE": "CWE-295",
    "Top25": false
  },
  {
    "ID": "CWE-326-1",
    "Description": "Use of weak cryptographic key",
    "VulCode": "from Crypto.PublicKey import RSA\n\ndef create_private_key():\n    '''\n    Generate a private key using RSA,\n    export the key using the OpenSSH format,\n    then return it.\n    '''\n    key = RSA.generate(1024)\n    return key.exportKey('OpenSSH')",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-326",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-326/author_1.py",
    "CWE": "CWE-326",
    "Top25": false
  },
  {
    "ID": "CWE-326-2",
    "Description": "Use of a broken or weak cryptographic hashing algorithm on sensitive data",
    "VulCode": "from Crypto.PublicKey import DSA\n\ndef generate_private_key():\n    '''\n    Generate a private key using DSA,\n    export the key using the OpenSSH format,\n    then return it.\n    '''\n    return DSA.generate(1024)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-326",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-326/author_2.py",
    "CWE": "CWE-326",
    "Top25": false
  },
  {
    "ID": "CWE-327-1",
    "Description": "Use of a broken or weak cryptographic algorithm",
    "VulCode": "from Crypto.Cipher import DES, AES\n\nSECRET_KEY = '12345678'\ncipher = DES.new(SECRET_KEY)\n\ndef send_encrypted(channel, message):\n    channel.send(cipher.encrypt(message))",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-327",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-327",
    "Top25": false
  },
  {
    "ID": "CWE-327-2",
    "Description": "Use of insecure SSL/TLS version",
    "VulCode": "import socket\nimport ssl\n\n\ndef connect(host, port):\n    '''\n    Create a client SSL socket that uses IPV4 and the TCP protocol, and\n    connect to the socket on the host and port provided as parameter.\n    Then, return the socket.\n    '''\n    ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))\n    ssl_sock.connect((host, port))\n    return ssl_sock",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-327",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-327",
    "Top25": false
  },
  {
    "ID": "CWE-327-3",
    "Description": "Use of a broken or weak cryptographic hashing algorithm on sensitive data",
    "VulCode": "import hashlib\n\ndef certificate_matches_known_hash(certificate, known_hash):\n    hash = hashlib.md5(certificate).hexdigest()\n    return hash == known_hash\n\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-327",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-327",
    "Top25": false
  },
  {
    "ID": "CWE-327-4",
    "Description": "Use of a broken or weak cryptographic hashing algorithm on sensitive data",
    "VulCode": "import hashlib\n\n\ndef get_password_hash(password: str, salt: str):\n    return hashlib.sha256(password + salt).hexdigest()",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-327",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-327",
    "Top25": false
  },
  {
    "ID": "CWE-338-1",
    "Description": "Insecure randomness",
    "VulCode": "import random\n\n\ndef generatePassword():\n    return random.random()\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-338",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-338/examples",
    "CWE": "CWE-338",
    "Top25": false
  },
  {
    "ID": "CWE-347-1",
    "Description": "JWT missing secret or public key verification",
    "VulCode": "import jwt\n\njwt.decode(payload, key=\"somekey\", verify=False)\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-347",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-347",
    "CWE": "CWE-347",
    "Top25": false
  },
  {
    "ID": "CWE-348-1",
    "Description": "IP address spoofing",
    "VulCode": "from flask import Flask\nfrom flask import request\n\napp = Flask(__name__)\n\n\n@app.route(\"/check_ip\")\ndef check_ip():\n    client_ip = request.headers.get(\"x-forwarded-for\")\n    if not client_ip.startswith(\"192.168.\"):\n        raise Exception(\"ip illegal\")\n    return \"ip legal\"\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-348",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-348",
    "Top25": false
  },
  {
    "ID": "CWE-348-2",
    "Description": "IP address spoofing",
    "VulCode": "from flask import Flask\nfrom flask import request\n\napp = Flask(__name__)\n\n\n@app.route(\"/check_ip\")\ndef check_ip():\n    client_ip = request.headers.get(\"x-forwarded-for\")\n    if not client_ip == \"127.0.0.1\":\n        raise Exception(\"ip illegal\")\n    return \"ip legal\"\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-348",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-327/examples",
    "CWE": "CWE-348",
    "Top25": false
  },
  {
    "ID": "CWE-400-1",
    "Description": "Regular expression injection",
    "VulCode": "import re\n\nfrom flask import request, Flask\n\napp = Flask(__name__)\n\n\n@app.route('/upload')\ndef upload():\n    '''\n    Get the username and a file attachment from the HTTP GET request.\n    Then, search the username in the filename of the attachment.\n    '''\n\n    username = request.args.get('username')\n    filename = request.files.get('attachment').filename\n\n    re.search(username, filename)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/Security/CWE-730",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-400/sonar_1.py",
    "CWE": "CWE-400",
    "Top25": false
  },
  {
    "ID": "CWE-502-1",
    "Description": "Deserialization of user-controlled data",
    "VulCode": "from django.conf.urls import url\nimport pickle\n\ndef deserialize(pickled):\n    return pickle.loads(pickled)\n\nurlpatterns = [\n    url(r'^(?P<object>.*)$', deserialize)\n]",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-502",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-502",
    "CWE": "CWE-502",
    "Top25": true
  },
  {
    "ID": "CWE-601-1",
    "Description": "URL redirection from remote source",
    "VulCode": "from flask import Flask, request, redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    target = request.args.get('target', '')\n    return redirect(target, code=302)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-601",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-601/examples",
    "CWE": "CWE-601",
    "Top25": false
  },
  {
    "ID": "CWE-601-2",
    "Description": "URL redirection from remote source",
    "VulCode": "from flask import request, redirect, Flask\n\napp = Flask(__name__)\n\n\n@app.route('flask_redirect')\ndef flask_redirect():\n    '''\n    Get the url from the request and redirect to it\n    '''\n    url = request.args[\"next\"]\n    return redirect(url)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-601",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-601/sonar_2.py",
    "CWE": "CWE-601",
    "Top25": false
  },
  {
    "ID": "CWE-611-1",
    "Description": "XML external entity expansion",
    "VulCode": "from flask import Flask, request\nimport lxml.etree\n\napp = Flask(__name__)\n\n@app.post(\"/upload\")\ndef upload():\n    xml_src = request.get_data()\n    doc = lxml.etree.fromstring(xml_src)\n    return lxml.etree.tostring(doc)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-611",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-611/examples",
    "CWE": "CWE-611",
    "Top25": false
  },
  {
    "ID": "CWE-611-2",
    "Description": "XML external entity expansion",
    "VulCode": "from flask import Flask, request\nimport lxml.etree\n\napp = Flask(__name__)\n\n\ndef checkPassword(userid, password):\n    pass\n\n\n@app.post(\"/upload\")\ndef upload():\n    '''\n    Get the xml file from the request and check if the userid and password are correct by invoking checkPassword().\n    '''\n    xml = request.files['xml']\n    root = lxml.etree.fromstring(xml.read())\n    userid = root.find('userid').text\n    password = root.find('password').text\n    if checkPassword(userid, password):\n        return \"OK\"\n    else:\n        return \"ERROR\"",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-611",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-611/author_1.py",
    "CWE": "CWE-611",
    "Top25": false
  },
  {
    "ID": "CWE-614-1",
    "Description": "Failure to use secure cookies",
    "VulCode": "from flask import Flask, request, make_response, Response\n\napp = Flask(__name__)\n\n\n@app.route(\"/set_cookie\")\ndef set_cookie():\n    resp = make_response()\n    resp.set_cookie(\"name\", value=\"value\")\n    return resp\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-614",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-614",
    "CWE": "CWE-614",
    "Top25": false
  },
  {
    "ID": "CWE-614-2",
    "Description": "Failure to use secure cookies",
    "VulCode": "from flask import Flask, request, make_response, Response\n\n\napp = Flask(__name__)\n\n\n@app.route(\"/set_cookie\")\ndef set_cookie():\n    resp = make_response(\"hello\")\n    resp.headers[\"Set-Cookie\"] = \"name=value;\"\n    return resp\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/experimental/Security/CWE-614",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/experimental/Security/CWE-614",
    "CWE": "CWE-614",
    "Top25": false
  },
  {
    "ID": "CWE-643-1",
    "Description": "XPath query built from user-controlled sources",
    "VulCode": "from lxml import etree\nfrom io import StringIO\n\nfrom django.urls import path\nfrom django.http import HttpResponse\nfrom django.template import Template, Context, Engine, engines\n\n\ndef a(request):\n    value = request.GET['xpath']\n    f = StringIO('<foo><bar></bar></foo>')\n    tree = etree.parse(f)\n    r = tree.xpath(\"/tag[@id='%s']\" % value)\n\n\nurlpatterns = [\n    path('a', a)\n]",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-643",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-643/",
    "CWE": "CWE-643",
    "Top25": false
  },
  {
    "ID": "CWE-643-2",
    "Description": "XPath query built from user-controlled sources",
    "VulCode": "from flask import request\nimport xml.etree.ElementTree as ET\n\ntree = ET.parse('users.xml')\nroot = tree.getroot()\n\n\n@app.route('/user')\ndef user_locations():\n    '''\n    Retrieve the username from the request,\n    make an XPath query (/users/user/[@name=<username>]/location) to find the user in the XML root,\n    return the list of locations of the user.\n    '''\n    username = request.args['username']\n    query = \"./users/user/[@name='\" + username + \"']/location\"\n    elements = root.findall(query)\n    return list(elements)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-643",
    "Source": "https://github.com/s2e-lab/SecurityEval/tree/main/Testcases_Insecure_Code/CWE-643/sonar_1.py",
    "CWE": "CWE-643",
    "Top25": false
  },
  {
    "ID": "CWE-730-1",
    "Description": "Regular expression injection",
    "VulCode": "from flask import request\nimport re\n\n\n@app.route(\"/direct\")\ndef direct():\n    '''\n    Get the regex from the 'pattern' in the GET request,\n    get the 'text' from the GET request,\n    and search the 'text' with the provided regex.\n    '''\n    pattern = request.args[\"pattern\"]\n    re.search(pattern, request.args[\"text\"])",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-730",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-730/",
    "CWE": "CWE-730",
    "Top25": false
  },
  {
    "ID": "CWE-730-2",
    "Description": "Regular expression injection",
    "VulCode": "from flask import request\nimport re\n\n\n@app.route(\"/direct\")\ndef direct():\n    '''\n    Get the regular expression pattern from the GET request (pattern), compile it\n    and then use it to search the string within the 'text' in the GET request.\n    '''\n    pattern = request.args[\"pattern\"]\n    compiled_pattern = re.compile(pattern)\n    compiled_pattern.search(request.args[\"text\"])",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-730",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-730/",
    "CWE": "CWE-730",
    "Top25": false
  },
  {
    "ID": "CWE-798-1",
    "Description": "Hard-coded credentials",
    "VulCode": "from django.shortcuts import redirect\n\n\ndef process_request(request):\n    password = request.GET[\"password\"]\n\n    if password == \"myPa55word\":\n        redirect(\"login\")\n\n",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-798",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-798/",
    "CWE": "CWE-798",
    "Top25": true
  },
  {
    "ID": "CWE-918-1",
    "Description": "Full server-side request forgery",
    "VulCode": "import requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    target = request.args[\"target\"]\n\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")\n\n    ",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-918",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-918/",
    "CWE": "CWE-918",
    "Top25": true
  },
  {
    "ID": "CWE-918-2",
    "Description": "Full server-side request forgery",
    "VulCode": "import requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/partial_ssrf\")\ndef partial_ssrf():\n    user_id = request.args[\"user_id\"]\n\n    resp = requests.get(\"https://api.example.com/user_info/\" + user_id)",
    "Check_ql": "/home/huhu/codeql-home/codeql-repo/python/ql/src/CWE-918",
    "Source": "https://github.com/github/codeql/tree/main/python/ql/src/Security/CWE-918/",
    "CWE": "CWE-918",
    "Top25": true
  }
]